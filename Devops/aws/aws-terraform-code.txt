This Terraform configuration provisions a simple infrastructure on AWS.
It includes a VPC, a public subnet, a security group, an S3 bucket, and an EC2 instance.
Define the required providers and their versions.
This ensures that Terraform uses the correct provider versions.
terraform {
required_providers {
aws = {
source  = "hashicorp/aws"
version = "~> 5.0"
}
}
}

Configure the AWS provider with the region where resources will be created.
It's a best practice to use variables for the region to make the code reusable.
provider "aws" {
region = "us-east-1"
}

Create a new Virtual Private Cloud (VPC).
This provides a logically isolated network for your resources.
resource "aws_vpc" "example_vpc" {
cidr_block = "10.0.0.0/16"
tags = {
Name = "example-vpc"
}
}

Create a public subnet within the VPC.
This subnet will host resources that need to be accessible from the internet.
resource "aws_subnet" "example_subnet" {
vpc_id                  = aws_vpc.example_vpc.id
cidr_block              = "10.0.1.0/24"
availability_zone       = "us-east-1a"
map_public_ip_on_launch = true # Automatically assigns a public IP to instances
tags = {
Name = "example-subnet"
}
}

Create an internet gateway to allow communication between the VPC and the internet.
resource "aws_internet_gateway" "example_igw" {
vpc_id = aws_vpc.example_vpc.id
tags = {
Name = "example-igw"
}
}

Create a route table for the public subnet.
This route table directs all internet-bound traffic to the internet gateway.
resource "aws_route_table" "example_rt" {
vpc_id = aws_vpc.example_vpc.id
route {
cidr_block = "0.0.0.0/0"
gateway_id = aws_internet_gateway.example_igw.id
}
tags = {
Name = "example-rt"
}
}

Associate the route table with the public subnet.
resource "aws_route_table_association" "example_rta" {
subnet_id      = aws_subnet.example_subnet.id
route_table_id = aws_route_table.example_rt.id
}

Create a security group for the EC2 instance.
This acts as a virtual firewall to control inbound and outbound traffic.
resource "aws_security_group" "example_sg" {
vpc_id      = aws_vpc.example_vpc.id
name        = "example-security-group"
description = "Allow inbound SSH and HTTP traffic"

Allow inbound SSH access from anywhere.
ingress {
from_port   = 22
to_port     = 22
protocol    = "tcp"
cidr_blocks = ["0.0.0.0/0"]
}

Allow inbound HTTP access from anywhere.
ingress {
from_port   = 80
to_port     = 80
protocol    = "tcp"
cidr_blocks = ["0.0.0.0/0"]
}

Allow all outbound traffic.
egress {
from_port   = 0
to_port     = 0
protocol    = "-1"
cidr_blocks = ["0.0.0.0/0"]
}

tags = {
Name = "example-sg"
}
}

Create an S3 bucket.
The force_destroy argument allows the bucket to be destroyed even if it contains objects.
resource "aws_s3_bucket" "example_bucket" {
bucket = "my-unique-terraform-bucket-987654321" # Bucket names must be globally unique.
force_destroy = true
tags = {
Name = "example-s3-bucket"
}
}

Get the latest Ubuntu AMI from the AWS provider.
data "aws_ami" "ubuntu" {
most_recent = true
owners      = ["099720109477"] # Canonical
filter {
name   = "name"
values = ["ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*"]
}
}

Create a virtual machine (EC2 instance).
resource "aws_instance" "example_vm" {
ami           = data.aws_ami.ubuntu.id
instance_type = "t2.micro"
subnet_id     = aws_subnet.example_subnet.id
vpc_security_group_ids = [aws_security_group.example_sg.id]
key_name      = "my-ec2-keypair" # Replace with your key pair name.

tags = {
Name = "example-vm"
}
}

Output the public IP address of the EC2 instance.
This makes it easy to find and connect to the instance after it's provisioned.
output "instance_public_ip" {
value = aws_instance.example_vm.public_ip
description = "The public IP address of the EC2 instance."
}

Output the S3 bucket name.
output "s3_bucket_name" {
value = aws_s3_bucket.example_bucket.bucket
description = "The name of the S3 bucket."
}